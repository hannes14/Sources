///////////////////////////////////////////////////////////////////////////////
version="version combinat.lib 4.1.0.3 Nov_2017 "; // $Id$
category="Miscellaneous";
info="
LIBRARY:  combinat.lib    Some useful functions

AUTHORS:  J. Boehm, boehm @ mathematik.uni-kl.de

OVERVIEW:

Some useful basic functions from combinatorics.

KEYWORDS:
partitions, permutations, sum, max, min

PROCEDURES:
partitions(int, int)                      partitions of an integer into a fixed number of summands
permute(list)                             all permutations of a list
intersectLists(list,list)                 returns a list of elements which are in both lists (no duplicates)
member(def,list)                          membership test
sublists(list)                            all sublists
intersectLists(list,list)                 list containing all elements of both lists
member(def,list)                          test whether an element is a member of a list
";

proc sublists(list L)
"USAGE:  sublists(L); L list@*
ASSUME:  L is a list@*
RETURN:  list of all sublists of L.
KEYWORDS: power set
EXAMPLE:  example sublists; shows an example
"
{
  if (size(L)==1){return(list(list(),L));}
  list L1 = L[1..size(L)-1];
  list S1 = sublists(L1);
  list S2;
  for (int i = 1;i<=size(S1);i++)
  {
    S2[i]=S1[i]+list(L[size(L)]);
  }
  return(S1+S2);
}
example
{ "EXAMPLE:"; echo=2;
  list L = 1,2,3,4,5;
  sublists(L);
}



proc permute (list N)
"USAGE:  permute(N); N list@*
ASSUME:  N is a list@*
RETURN:  list with all permutations of N.
THEORY:  Computes all permutations of N.
KEYWORDS: permutations
EXAMPLE:  example permute; shows an example
"
{
   int i,j,k;
   list L,L1;
   if (size(N)==1)
   {
     return(list(N));
   }
   else
   {
     k=1;
     for (i=1; i<=size(N); i++)
     {
       L=permute(delete(N,i));
       for (j=1; j<=size(L); j++)
       {
          L1[k]=L[j]+list(N[i]);
          k=k+1;
       }
     }
   }
return(L1);}
example
{ "EXAMPLE:"; echo=2;
  ring R=(0,x1,x2,x3,x4),(q),dp;
  permute(list(x1,x2,x3,x4));
}

proc partitions(int n, int a)
"USAGE:  partitions(n,a); n int, a int@*
ASSUME:  n and a  are positive integers@*
RETURN:  list of all partitions of a into n summands.
THEORY:  Computes all partitions of a into n summands.
KEYWORDS: partitions
EXAMPLE:  example partitions; shows an example
"
{
  ring R = 2,(x(1..n)),dp;
  ideal I = maxideal(a);
  list L;
  for (int j=1;j<=size(I);j++)
  {
    L[j]=leadexp(I[j]);
  }
  return(L);
}
example
{ "EXAMPLE:"; echo=2;
  partitions(3,7);
}





proc intersectLists(list L, list M)
"USAGE:  intersectLists(L,M); L list, M list@*
RETURN:  list, containing all elements of L which are elements of M
THEORY:  we require the elements of the lists to have a compare operator ==.
KEYWORDS: lists
EXAMPLE:  example intersectLists; shows an example
"
{
  list I;
  int jj=1;
  for (int j=1; j<=size(L); j++)
  {
     if (member(L[j],M)){
        if (not member(L[j],I))
        {
          I[jj]=L[j];jj++;
        }
     }
  }
  return(I);
}
example
{ "EXAMPLE:"; echo=2;
  intersectLists(list(1,1,2,2,3),list(2,3,3,4));
  intersectLists(list(1,1,2,2,3),list(1,1,2,2,3));
}


proc member(def e, list L)
"USAGE:  member(e,L); e def, L list@*
RETURN:  1 if e is an element of L, 0 otherwise
THEORY:  we require the elements involved to have a compare operator ==.
KEYWORDS: lists, elements
EXAMPLE:  example member; shows an example
"
{
  for (int j=1; j<=size(L); j++)
  {
    if (L[j]==e){ return(1); }
  }
  return(0);
}
example
{ "EXAMPLE:"; echo=2;
  member(1,list(1,4,5));
}
